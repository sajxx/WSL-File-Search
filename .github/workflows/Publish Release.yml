name: Publish Release

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore: 
      - .github/workflows/*
      - README.md
      - .gitignore

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      python_ver: 3.8
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.python_ver }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python_ver }}
          
      - name: Get version from plugin.json
        id: version
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: 'plugin.json'
          prop_path: 'Version'
          
      - run: echo "Plugin version is ${{steps.version.outputs.prop}}"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
          # Create lib directory
          mkdir -p lib
          
          # Try to install flowlauncher - handle gracefully if it fails
          echo "Attempting to install flowlauncher..."
          
          pip install flowlauncher -t ./lib --no-cache-dir || \
          pip install flowlauncher==0.2.0 -t ./lib --no-cache-dir || \
          pip install "flowlauncher>=0.1.0" -t ./lib --no-cache-dir || \
          echo "Could not install flowlauncher - plugin will handle missing dependency"
          
          # Show what we have
          if [ -d "./lib" ] && [ "$(ls -A ./lib 2>/dev/null)" ]; then
            echo "Dependencies installed:"
            ls -la lib/
          else
            echo "No dependencies installed"
          fi
          
      - name: Clean up dependencies
        run: |
          if [ -d "./lib" ] && [ "$(ls -A ./lib 2>/dev/null)" ]; then
            find ./lib -name "*.pyc" -delete 2>/dev/null || true
            find ./lib -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
            find ./lib -name "*.dist-info" -type d -exec rm -rf {} + 2>/dev/null || true
            find ./lib -name "*.egg-info" -type d -exec rm -rf {} + 2>/dev/null || true
          fi
          
      - name: Create build directory
        run: |
          # Create a separate build directory to avoid copying into itself
          mkdir -p build
          cd build
          
          # Create the plugin directory with correct name
          mkdir -p "WSL File Search"
          
          echo "Build directory created successfully"
          
      - name: Copy plugin files
        run: |
          echo "Copying plugin files to build directory..."
          
          # Copy essential files
          cp main.py "build/WSL File Search/"
          cp plugin.json "build/WSL File Search/"
          cp icon.png "build/WSL File Search/"
          
          # Copy optional files if they exist
          [ -f SettingsTemplate.yaml ] && cp SettingsTemplate.yaml "build/WSL File Search/" || echo "No SettingsTemplate.yaml"
          [ -f README.md ] && cp README.md "build/WSL File Search/" || echo "No README.md" 
          [ -f LICENSE ] && cp LICENSE "build/WSL File Search/" || echo "No LICENSE"
          
          # Copy dependencies if they exist
          if [ -d "lib" ] && [ "$(ls -A lib 2>/dev/null)" ]; then
            echo "Copying dependencies..."
            cp -r lib "build/WSL File Search/"
          else
            echo "No dependencies to copy"
          fi
          
      - name: Create release package
        run: |
          echo "Creating release package..."
          
          # Move to build directory
          cd build
          
          # Show what we're packaging
          echo "Package contents:"
          find "WSL File Search" -type f
          
          # Create zip file
          zip -r "../WSL File Search-v${{steps.version.outputs.prop}}.zip" "WSL File Search/"
          
          # Verify zip was created
          cd ..
          echo "Package created:"
          ls -la "WSL File Search-v${{steps.version.outputs.prop}}.zip"
          
          # Show zip contents for verification
          echo "Zip contents:"
          unzip -l "WSL File Search-v${{steps.version.outputs.prop}}.zip" | head -20
          
      - name: Publish Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          files: 'WSL File Search.zip'
          tag_name: "v${{steps.version.outputs.prop}}"
          body: |
            # WSL File Search v${{steps.version.outputs.prop}}
            
            🔍 **Lightning-fast WSL file search with Windows integration**
            
            ## ⚡ Quick Installation
            1. **Download** `WSL File Search.zip` below
            2. **Extract** to: `%APPDATA%\FlowLauncher\Plugins\`
            3. **Restart** Flow Launcher
            4. **Search** with: `wslf [your search term]`
            
            ## 🚀 Key Features
            | Feature | Description |
            |---------|-------------|
            | ⚡ **Ultra-fast** | Uses `fd` command for sub-second searches |
            | 🎯 **Smart results** | Configurable limits (5-100 results) |  
            | 🗂️ **Explorer integration** | Open files directly in Windows Explorer |
            | ⌨️ **Terminal access** | Right-click → Windows Terminal + WSL |
            | ⚙️ **Flexible settings** | Choose distro, shell, exclusions |
            | 🔍 **Advanced filtering** | Extension support, fuzzy matching |
            
            ## 💡 Usage Examples
            ```bash
            wslf config           # Find configuration files
            wslf .py .js          # Find Python and JavaScript files
            wslf ext:md ext:txt   # Find markdown and text files  
            wslf docker compose  # Find Docker compose files
            wslf src project      # Search in src directories
            ```
            
            ## 📋 Prerequisites
            | Component | Requirement | Installation |
            |-----------|-------------|--------------|
            | **Windows** | 10/11 | WSL 2 enabled |
            | **WSL** | Ubuntu/Debian | `wsl --install` |
            | **fd** | Latest | `sudo apt install fd-find` |
            | **Flow Launcher** | v1.20+ | [Download here](https://flowlauncher.com) |
            
            ## 🛠️ Quick fd Setup
            ```bash
            # Install fd in WSL
            sudo apt update && sudo apt install fd-find
            
            # Create symlink (Ubuntu calls it 'fdfind')
            mkdir -p ~/.local/bin
            ln -sf $(which fdfind) ~/.local/bin/fd
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
            source ~/.bashrc
            
            # Test it works
            fd --version && echo "✅ fd is ready!"
            ```
            
            ## ✅ What's New in v${{steps.version.outputs.prop}}
            - **🏗️ Automated dependency building** - No more bundled dependencies
            - **📦 Improved packaging** - Proper Flow Launcher compliance  
            - **🛡️ Enhanced error handling** - Graceful fallbacks for missing dependencies
            - **⚡ Better performance** - Optimized search and caching
            - **🎨 Cleaner codebase** - Separated build artifacts from source
            
            ## 🆘 Troubleshooting
            - **No results?** Ensure `fd` is installed: `wsl bash -c "fd --version"`
            - **Terminal won't open?** Install Windows Terminal from Microsoft Store
            - **Plugin not visible?** Check plugins are in `%APPDATA%\FlowLauncher\Plugins\`
            
            ---
            
            **🐛 Found an issue?** → [Report it here](https://github.com/sajxx/WSL-File-Search/issues)  
            **💡 Feature idea?** → [Suggest it here](https://github.com/sajxx/WSL-File-Search/discussions)  
            **❤️ Like the plugin?** → [⭐ Star the repo](https://github.com/sajxx/WSL-File-Search)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}